from Modules.CloudStorage.utils.util_helpers import *

def run_module(user_args, session, first_run = False, last_run = False, output_format = ["table"]):
    
    # Set up Argparser to handle flag arguments
    parser = argparse.ArgumentParser(description="Test Module", allow_abbrev=False)

    # Create a group for --sa-email and --create
    sa_email_group = parser.add_mutually_exclusive_group(required=False)
    sa_email_group.add_argument('--sa-email',  help='Create SA email')
    sa_email_group.add_argument('--create', action='store_true', help='Create account')

    # Create a group for --sa-email and --create
    account_id_group = parser.add_mutually_exclusive_group(required=False)
    account_id_group.add_argument('--access-id', help='Create SA email')
    account_id_group.add_argument('--state', choices = ["ACTIVE", "INACTIVE", "DELETED"], help='Create SA email')

    account_id_group.add_argument('--update', action='store_true', help='Create account')

    parser.add_argument("-v","--debug",action="store_true",required=False,help="Get verbose data returned")

    args = parser.parse_args(user_args)

    debug = args.debug
    
    project_id = session.project_id

    storage_client = storage.Client(credentials = session.credentials)    

    action_dict = {}

    choice = ""
    if not args.create and not args.update:
        choice = session.choice_selector(["CREATE", "UPDATE"],"Create a new MAC key tied to an sa (will give you back secret) or update the state of an existing one: ")


    # If bucket supplied get coresponding project ID
    if args.create or choice == "CREATE":

        if args.sa_email:

            sa_email = args.sa_email

        else:

            rows_returned = session.get_data("iam-principals", columns = ["name", "email"], conditions = "type = \"service_account\"")
            if len(rows_returned) == 0:
                print("[X] No service accounts were identified in the existing databases. If you know of the email re-run the module with the --sa-email flag. Exiting...")
                return -1
            else:
                sa_dict = session.choice_selector(rows_returned,"Choose an existing sa from those below to add HMAC keys to:", fields=["name"])
                sa_email = sa_dict["email"]

        key, secret = create_hmac_key(storage_client, sa_email)
        
        if key:
            print(f"[*] Key has been created for {sa_email} with:")
            print(f"[*] Access Key ID: {key.access_id}")
            print(f"[*] Secret: {secret}")
            
            save_hmac_key(key, session, secret=secret)
            
            action_dict.setdefault('project_permissions', {}).setdefault(project_id, set()).add('storage.hmacKeys.create')

            choice_enum = session.choice_prompt("Would you like to use the hmac key and secret to enumerate buckets? [y\\n] ", regex = r'^[yn]$')

            if choice_enum == "y":
                
                user_args = ["--access-id", key.access_id ,"--hmac-secret", secret]
                
                
                choice_download = session.choice_prompt("Do you want to download identified data? [y\\n] ", regex = r'^[yn]$')
                
                if choice_download:
                    user_args.append("--download")

                module = importlib.import_module("Modules.CloudStorage.Enumeration.enum_buckets")
                module.run_module(user_args, session)
                        

        else:
            print("[X] Key could not be created for some reason. See errors above. Exiting module...")

    elif args.update or choice == "UPDATE":

        if args.access_id:
            access_id = args.access_id
        else:
            rows_returned = session.get_data("cloudstorage-hmac-keys", columns = [ "access_id", "state"])
            if len(rows_returned) ==0:
                print("[X] No existing HMAC keys were identified in the existing databases. If you know of the hmac key rerun --account-id flag. Exiting...")
                return -1

            else:
                sa_dict = session.choice_selector(rows_returned,"Choose an existing HMAC key below: ", fields=["access_id", "state"])
                access_id = sa_dict["access_id"]

        if args.state:
            state = args.state
        
        else:

            state = session.choice_selector(["ACTIVE", "INACTIVE", "DELETED"],"Choose the state you want to update the key for: ")
    
        status = update_hmac_key(storage_client, access_id, state, debug=debug)
        
        if status:
            print(f"[*] Key has been updated for {access_id} with:")
            print(f"[*] New State: {state} (Note this might take a few minutes to update)")
            action_dict.setdefault('project_permissions', {}).setdefault(project_id, set()).add('storage.hmacKeys.update')

        else:
            print("[X] Key could not be updated for some reason. See errors above. Exiting module...")

    session.insert_actions(action_dict,column_name = "storage_actions_allowed")